package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/tartale/go/pkg/filter"
	"github.com/tartale/kmttg-plus/go/pkg/server"
)

// Eq is the resolver for the eq field.
func (r *filterOperatorResolver) Eq(ctx context.Context, obj *filter.Operator, data interface{}) error {
	panic(fmt.Errorf("not implemented: Eq - eq"))
}

// Ne is the resolver for the ne field.
func (r *filterOperatorResolver) Ne(ctx context.Context, obj *filter.Operator, data interface{}) error {
	panic(fmt.Errorf("not implemented: Ne - ne"))
}

// Lt is the resolver for the lt field.
func (r *filterOperatorResolver) Lt(ctx context.Context, obj *filter.Operator, data interface{}) error {
	panic(fmt.Errorf("not implemented: Lt - lt"))
}

// Gt is the resolver for the gt field.
func (r *filterOperatorResolver) Gt(ctx context.Context, obj *filter.Operator, data interface{}) error {
	panic(fmt.Errorf("not implemented: Gt - gt"))
}

// Lte is the resolver for the lte field.
func (r *filterOperatorResolver) Lte(ctx context.Context, obj *filter.Operator, data interface{}) error {
	panic(fmt.Errorf("not implemented: Lte - lte"))
}

// Gte is the resolver for the gte field.
func (r *filterOperatorResolver) Gte(ctx context.Context, obj *filter.Operator, data interface{}) error {
	panic(fmt.Errorf("not implemented: Gte - gte"))
}

// Matches is the resolver for the matches field.
func (r *filterOperatorResolver) Matches(ctx context.Context, obj *filter.Operator, data interface{}) error {
	panic(fmt.Errorf("not implemented: Matches - matches"))
}

// FilterOperator returns server.FilterOperatorResolver implementation.
func (r *Resolver) FilterOperator() server.FilterOperatorResolver { return &filterOperatorResolver{r} }

type filterOperatorResolver struct{ *Resolver }
